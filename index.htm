<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Codah — conversational console</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta http-equiv="Content-Security-Policy"
        content="default-src 'self'; script-src 'self'; style-src 'unsafe-inline' 'self'; connect-src 'self' https:; img-src 'self' data:; frame-ancestors 'none'; base-uri 'none'">
  <style>
    :root{
      color-scheme:light;
      font-family:"Inter", "Segoe UI", Roboto, system-ui, -apple-system, sans-serif;
      --bg:#eef1f7;
      --panel:#ffffff;
      --panel-border:#d7deed;
      --muted:#6b7285;
      --primary:#2b6bff;
      --primary-dark:#184dce;
      --accent:#eff4ff;
      --shadow:0 24px 60px rgba(15,40,96,0.12);
      --cc-overlay:rgba(11,18,32,0.72);
      --cc-surface:#141b2d;
      --cc-border:rgba(129,140,248,0.45);
      --cc-heading:#f4f7ff;
      --cc-body:#d9e2ff;
      --cc-muted:#a5b4fc;
      --cc-pill:#1e2846;
      --cc-pill-text:#c7d2fe;
      --cc-switch-width:58px;
      --cc-switch-height:30px;
      --cc-thumb-size:24px;
      --cc-switch-off:#475569;
      --cc-switch-on:#7c3aed;
      --cc-success:#34d399;
      --cc-focus:#c084fc;
    }
    *,*::before,*::after{box-sizing:border-box}
    body{margin:0;min-height:100vh;background:var(--bg);display:flex;align-items:center;justify-content:center;padding:32px;color:#111827}
    .stage{width:100%;display:flex;justify-content:center}
    .console{background:var(--panel);border:1px solid var(--panel-border);border-radius:36px;box-shadow:var(--shadow);padding:28px;display:flex;flex-direction:column;gap:24px;width:min(460px,92vw);min-height:640px}
    .toolbar{display:flex;align-items:flex-start;justify-content:space-between;gap:12px}
    .toolbar-brand{display:flex;gap:14px;align-items:flex-start}
    .brand-glow{width:14px;height:14px;border-radius:50%;background:radial-gradient(circle at center,#43d3ff,#2b6bff);box-shadow:0 0 16px rgba(43,107,255,0.45);margin-top:6px}
    .brand-copy{display:flex;flex-direction:column;gap:4px}
    .brand-title{font-size:1.05rem;font-weight:600;letter-spacing:0.02em;color:#0f172a}
    .provider-select{display:flex;align-items:center;gap:8px;font-size:0.8rem;color:var(--muted);text-transform:uppercase;letter-spacing:0.08em}
    .provider-select select{appearance:none;border:1px solid var(--panel-border);border-radius:999px;background:var(--accent);padding:6px 18px;font:inherit;color:#1f2a44;cursor:pointer;transition:border-color .2s ease,box-shadow .2s ease}
    .provider-select select:focus-visible{outline:none;border-color:var(--primary);box-shadow:0 0 0 3px rgba(43,107,255,0.35)}
    .toolbar-controls{display:flex;gap:10px}
    .chip{border:none;border-radius:999px;background:var(--primary);color:#fff;font-size:0.82rem;font-weight:600;padding:9px 20px;cursor:pointer;box-shadow:0 12px 24px rgba(43,107,255,0.28);transition:transform .2s ease,box-shadow .2s ease}
    .chip:focus-visible{outline:none;box-shadow:0 0 0 3px rgba(43,107,255,0.45)}
    .chip:active{transform:translateY(1px)}
    .chip[aria-pressed="true"]{background:var(--primary-dark)}
    .chat-surface{flex:1;background:#f8faff;border-radius:28px;border:1px solid var(--panel-border);padding:24px;display:flex}
    .chat-log{flex:1;overflow-y:auto;display:flex;flex-direction:column;gap:18px;scrollbar-width:thin;scrollbar-color:#c3d0ea transparent}
    .chat-log::-webkit-scrollbar{width:6px}
    .chat-log::-webkit-scrollbar-track{background:transparent}
    .chat-log::-webkit-scrollbar-thumb{background:#c3d0ea;border-radius:999px}
    .empty-state{margin:0 auto;color:var(--muted);font-size:0.9rem;padding-top:36px;text-align:center;max-width:240px}
    .message{display:grid;gap:6px;max-width:88%}
    .message-role{font-size:0.7rem;text-transform:uppercase;letter-spacing:0.1em;color:#9aa3b7}
    .message-bubble{margin:0;padding:14px 18px;border-radius:20px;line-height:1.55;background:#fff;border:1px solid rgba(209,218,236,0.9);color:#1b2337;box-shadow:0 16px 32px rgba(15,40,96,0.08)}
    .message-user{margin-left:auto;text-align:right}
    .message-user .message-role{color:#89a8ff}
    .message-user .message-bubble{background:var(--primary);color:#fff;border:none;border-bottom-right-radius:8px}
    .message-assistant .message-bubble{border-radius:20px;border-bottom-left-radius:8px}
    .message-system .message-bubble{font-style:italic;background:#f2f4fb;color:#4c566a;border-style:dashed}
    .composer{display:flex;flex-direction:column;gap:16px}
    .composer input[type="text"]{width:100%;border:1px solid var(--panel-border);border-radius:18px;padding:16px 20px;font-size:1rem;background:#f9fbff;color:#111827;transition:border-color .2s ease,box-shadow .2s ease}
    .composer input[type="text"]:focus-visible{outline:none;border-color:var(--primary);box-shadow:0 0 0 3px rgba(43,107,255,0.28);background:#fff}
    .composer input[type="text"]:disabled{background:#e8edf8;color:#6b7285}
    .actions{display:flex;gap:10px;flex-wrap:wrap}
    .action{flex:1 1 30%;display:inline-flex;justify-content:center;align-items:center;border:none;border-radius:999px;background:var(--primary);color:#fff;font-weight:600;padding:12px 18px;cursor:pointer;box-shadow:0 14px 30px rgba(43,107,255,0.25);transition:transform .2s ease,box-shadow .2s ease}
    .action:focus-visible{outline:none;box-shadow:0 0 0 3px rgba(43,107,255,0.45)}
    .action:active{transform:translateY(1px)}
    .action:is(:disabled,.is-disabled){background:#9bb5ff;color:#f1f5ff;cursor:not-allowed;box-shadow:none}
    .action.is-active{background:var(--primary-dark)}
    .status{min-height:1.3rem;font-size:0.85rem;margin:0;color:var(--muted)}
    .status[data-tone="success"]{color:#1c8f4d}
    .status[data-tone="error"]{color:#d02938}
    .status[data-tone="warn"]{color:#cc7a00}
    .sr-only{position:absolute;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;width:1px;overflow:hidden;white-space:nowrap;border:0;padding:0}
    body.cookie-modal-open{overflow:hidden}
    .cookie-trigger{position:fixed;bottom:24px;right:24px;display:inline-flex;align-items:center;gap:8px;background:#10182b;color:#f8fbff;border:1px solid rgba(124,139,255,0.35);border-radius:999px;padding:10px 18px;font-size:0.85rem;font-weight:600;cursor:pointer;z-index:1200;box-shadow:0 18px 42px rgba(15,40,96,0.38);transition:transform .2s ease,box-shadow .2s ease,background .2s ease}
    .cookie-trigger span[aria-hidden="true"]{font-size:1.1rem}
    .cookie-trigger:hover{transform:translateY(-1px);box-shadow:0 20px 48px rgba(15,40,96,0.46)}
    .cookie-trigger:focus-visible{outline:none;box-shadow:0 0 0 3px rgba(124,139,255,0.45)}
    .cookie-trigger[hidden]{display:none}
    .cookie-modal-open .cookie-trigger{opacity:0.35;pointer-events:none}
    .cookie-layer{position:fixed;inset:0;display:flex;align-items:flex-end;justify-content:center;padding:24px;background:var(--cc-overlay);z-index:1100;opacity:0;visibility:hidden;transition:opacity .3s ease,visibility .3s ease}
    .cookie-layer.is-visible{opacity:1;visibility:visible}
    .cookie-dialog{background:var(--cc-surface);color:var(--cc-body);width:min(560px,100%);border-radius:28px;border:1px solid var(--cc-border);box-shadow:0 32px 70px rgba(6,12,32,0.55);padding:30px;display:flex;flex-direction:column;gap:22px;transform:translateY(24px);transition:transform .3s ease,opacity .3s ease;opacity:0}
    .cookie-layer.is-visible .cookie-dialog{transform:translateY(0);opacity:1}
    .cookie-header{display:flex;justify-content:space-between;align-items:flex-start;gap:18px}
    .cookie-title{margin:0;font-size:1.35rem;font-weight:700;color:var(--cc-heading);letter-spacing:0.01em}
    .cookie-lede{margin:0;color:var(--cc-body);line-height:1.55;font-size:0.95rem}
    .cookie-close{border:none;background:transparent;color:var(--cc-muted);font-size:1.2rem;cursor:pointer;border-radius:50%;width:32px;height:32px;display:grid;place-items:center;transition:background .2s ease,color .2s ease}
    .cookie-close:hover{background:rgba(124,139,255,0.16);color:var(--cc-heading)}
    .cookie-close:focus-visible{outline:none;box-shadow:0 0 0 3px rgba(124,139,255,0.45)}
    .cookie-form{display:flex;flex-direction:column;gap:22px}
    .cookie-options{margin:0;padding:0;border:none;display:flex;flex-direction:column;gap:18px}
    .cookie-option{display:flex;gap:18px;justify-content:space-between;align-items:flex-start;padding:18px;border:1px solid rgba(124,139,255,0.18);border-radius:20px;background:rgba(24,34,60,0.55);box-shadow:inset 0 1px 0 rgba(255,255,255,0.04)}
    .cookie-option-header{display:flex;flex-direction:column;gap:10px;max-width:65%}
    .cookie-option-title{margin:0;font-size:1.05rem;font-weight:600;color:var(--cc-heading)}
    .cookie-option-desc{margin:0;color:var(--cc-body);line-height:1.6;font-size:0.9rem}
    .cookie-pill{display:inline-flex;align-items:center;gap:6px;background:var(--cc-pill);color:var(--cc-pill-text);border:1px solid rgba(124,139,255,0.45);border-radius:999px;padding:4px 10px;font-size:0.7rem;text-transform:uppercase;letter-spacing:0.09em;font-weight:600;width:max-content}
    .cookie-option-toggle{display:flex;flex-direction:column;align-items:flex-end;gap:8px;text-align:right}
    .cookie-switch-label{display:grid;justify-items:end;gap:6px}
    .cookie-switch{appearance:none;-webkit-appearance:none;width:var(--cc-switch-width);height:var(--cc-switch-height);background:var(--cc-switch-off);border-radius:calc(var(--cc-switch-height)/2);position:relative;cursor:pointer;border:1px solid rgba(15,23,42,0.4);box-shadow:inset 0 0 0 1px rgba(0,0,0,0.2);transition:background .2s ease,box-shadow .2s ease}
    .cookie-switch::before{content:"";position:absolute;top:50%;left:4px;translate:0 -50%;width:var(--cc-thumb-size);height:var(--cc-thumb-size);border-radius:50%;background:#fff;box-shadow:0 2px 6px rgba(8,12,32,0.45);transition:left .2s ease}
    .cookie-switch:checked{background:var(--cc-switch-on)}
    .cookie-switch:checked::before{left:calc(100% - var(--cc-thumb-size) - 4px)}
    .cookie-switch:focus-visible{outline:3px solid rgba(192,132,252,0.55);outline-offset:4px}
    .cookie-switch:disabled{cursor:not-allowed;opacity:0.8}
    .cookie-switch:disabled::before{background:#e2e8f0;box-shadow:0 1px 2px rgba(8,12,32,0.35)}
    .cookie-switch-state{font-size:0.75rem;letter-spacing:0.08em;text-transform:uppercase;color:var(--cc-muted);font-weight:600;min-width:8ch;text-align:right}
    .cookie-switch-state[data-state="on"]{color:var(--cc-success)}
    .cookie-switch-state[data-state="always"]{color:var(--cc-muted)}
    .cookie-switch-note{margin:0;font-size:0.78rem;color:var(--cc-muted)}
    .cookie-actions{display:flex;flex-wrap:wrap;gap:12px;justify-content:flex-end}
    .cookie-action{border:none;border-radius:999px;font-size:0.92rem;font-weight:600;padding:12px 22px;cursor:pointer;transition:transform .2s ease,box-shadow .2s ease,background .2s ease,color .2s ease}
    .cookie-action:focus-visible{outline:none;box-shadow:0 0 0 3px rgba(124,139,255,0.45)}
    .cookie-action.primary{background:linear-gradient(135deg,#7c3aed,#6366f1);color:#fff;box-shadow:0 18px 36px rgba(100,116,255,0.45)}
    .cookie-action.primary:hover{transform:translateY(-1px);box-shadow:0 22px 40px rgba(99,102,241,0.5)}
    .cookie-action.secondary{background:rgba(124,139,255,0.18);color:var(--cc-heading);border:1px solid rgba(124,139,255,0.35)}
    .cookie-action.secondary:hover{background:rgba(124,139,255,0.26)}
    .cookie-action.ghost{background:transparent;color:var(--cc-muted);border:1px solid rgba(124,139,255,0.2)}
    .cookie-action.ghost:hover{color:var(--cc-heading);border-color:rgba(124,139,255,0.32)}
    .cookie-footnote{margin:0;color:var(--cc-muted);font-size:0.75rem;text-align:right}
    .cookie-noscript{position:fixed;bottom:18px;left:50%;transform:translateX(-50%);background:#1f2946;color:#f8fbff;border:1px solid rgba(124,139,255,0.35);border-radius:18px;padding:14px 20px;font-size:0.82rem;line-height:1.5;max-width:min(420px,90vw);z-index:800;box-shadow:0 18px 46px rgba(10,16,32,0.45)}
    @media (max-width:640px){
      .cookie-dialog{padding:24px;border-radius:24px}
      .cookie-option{flex-direction:column;align-items:flex-start}
      .cookie-option-header{max-width:100%}
      .cookie-option-toggle{width:100%;align-items:flex-start;text-align:left}
      .cookie-switch-label{justify-items:start}
      .cookie-switch-state{text-align:left}
      .cookie-actions{justify-content:flex-start}
      .cookie-trigger{right:16px;bottom:16px}
      .cookie-noscript{left:16px;right:16px;transform:none}
    }
    @media (prefers-reduced-motion:reduce){
      .cookie-layer,.cookie-dialog,.cookie-trigger,.cookie-action,.cookie-switch{transition:none}
    }
    @media (max-width:520px){
      body{padding:16px}
      .console{padding:22px;border-radius:28px;min-height:520px}
      .chat-surface{padding:18px;border-radius:24px}
      .actions{flex-direction:column}
      .action{width:100%}
    }
  </style>
</head>
<body>
  <main class="stage">
    <section class="console" role="application" aria-label="Codah conversational console">
      <header class="toolbar">
        <div class="toolbar-brand">
          <span class="brand-glow" aria-hidden="true"></span>
          <div class="brand-copy">
            <span class="brand-title">Codah Console</span>
            <label class="provider-select" for="provider">
              <span>Route</span>
              <select id="provider" name="provider">
                <option value="studio">studio (Google AI Studio)</option>
                <option value="codex">codex (HTTP endpoint)</option>
              </select>
            </label>
          </div>
        </div>
        <div class="toolbar-controls">
          <button type="button" class="chip" id="lang-toggle" aria-label="Switch language">EN</button>
          <button type="button" class="chip" id="mute-toggle" aria-pressed="false">Mute</button>
        </div>
      </header>

      <div class="chat-surface">
        <div class="chat-log" id="log" role="log" aria-live="polite" aria-label="Conversation transcript">
          <p class="empty-state" id="empty-state">Say hello to start a conversation.</p>
        </div>
      </div>

      <form class="composer" id="composer" autocomplete="off">
        <label class="sr-only" for="msg">Message</label>
        <input id="msg" name="message" type="text" inputmode="text" placeholder="hello" autocomplete="off">
        <div class="actions">
          <button type="submit" class="action primary" id="send">Send</button>
          <button type="button" class="action" id="record" aria-pressed="false">Record</button>
          <button type="button" class="action" id="upload">Upload</button>
        </div>
        <p class="status" id="status" role="status" aria-live="polite"></p>
      </form>

      <input type="file" id="file-upload" class="sr-only" accept="audio/*,.txt,.md,.pdf,image/*" tabindex="-1" aria-hidden="true">
    </section>
  </main>

  <button type="button" class="cookie-trigger" id="cookie-trigger" hidden aria-expanded="false" aria-controls="cookie-dialog">
    <span aria-hidden="true">🍪</span>
    <span>Cookie preferences</span>
  </button>

  <div class="cookie-layer" id="cookie-layer" hidden>
    <section class="cookie-dialog" id="cookie-dialog" role="dialog" aria-modal="true" aria-labelledby="cookie-title" aria-describedby="cookie-desc" tabindex="-1">
      <header class="cookie-header">
        <div>
          <h2 class="cookie-title" id="cookie-title">Cookie preferences · Preferencias de cookies</h2>
        </div>
        <button type="button" class="cookie-close" id="cookie-close" aria-label="Close cookie preferences">&times;</button>
      </header>
      <p class="cookie-lede" id="cookie-desc" lang="es">Elija cómo OPS Online Support utiliza cookies para reforzar la seguridad, la analítica y los servicios personalizados. Puede ajustar estas selecciones cuando lo necesite.</p>
      <form class="cookie-form" id="cookie-form" lang="es">
        <fieldset class="cookie-options" aria-label="Categorías de cookies">
          <legend class="sr-only">Categorías de cookies</legend>
          <div class="cookie-option">
            <div class="cookie-option-header">
              <span class="cookie-pill" aria-hidden="true">Requeridas</span>
              <h3 class="cookie-option-title" id="cookie-necessary-title">Estrictamente necesarias</h3>
              <p class="cookie-option-desc" id="cookie-necessary-desc" lang="es">Requeridas para la seguridad, la autenticación y el cumplimiento normativo. Estas cookies mantienen los servicios esenciales y no pueden desactivarse.</p>
            </div>
            <div class="cookie-option-toggle">
              <label class="cookie-switch-label" for="consent-necessary">
                <input type="checkbox" class="cookie-switch" id="consent-necessary" name="necessary" data-preference="necessary" checked disabled aria-describedby="cookie-necessary-desc">
                <span class="cookie-switch-state" aria-live="polite">Siempre activa</span>
              </label>
              <p class="cookie-switch-note" lang="es">Protege sesión y configuración base.</p>
            </div>
          </div>
          <div class="cookie-option">
            <div class="cookie-option-header">
              <span class="cookie-pill" aria-hidden="true">Analítica</span>
              <h3 class="cookie-option-title" id="cookie-analytics-title">Rendimiento y analítica</h3>
              <p class="cookie-option-desc" id="cookie-analytics-desc" lang="es">Ayuda a comprender el uso del sitio, mejorar el rendimiento digital y monitorizar Core Web Vitals de forma responsable.</p>
            </div>
            <div class="cookie-option-toggle">
              <label class="cookie-switch-label" for="consent-analytics">
                <input type="checkbox" class="cookie-switch" id="consent-analytics" name="analytics" data-preference="analytics" aria-describedby="cookie-analytics-desc">
                <span class="cookie-switch-state" aria-live="polite">Desactivadas</span>
              </label>
              <p class="cookie-switch-note" lang="es">Sin seguimiento adicional cuando está apagado.</p>
            </div>
          </div>
          <div class="cookie-option">
            <div class="cookie-option-header">
              <span class="cookie-pill" aria-hidden="true">Experiencias</span>
              <h3 class="cookie-option-title" id="cookie-marketing-title">Personalización y marketing</h3>
              <p class="cookie-option-desc" id="cookie-marketing-desc" lang="es">Permite contenido personalizado, campañas y memoria del chatbot para ofrecer comunicaciones relevantes.</p>
            </div>
            <div class="cookie-option-toggle">
              <label class="cookie-switch-label" for="consent-marketing">
                <input type="checkbox" class="cookie-switch" id="consent-marketing" name="marketing" data-preference="marketing" aria-describedby="cookie-marketing-desc">
                <span class="cookie-switch-state" aria-live="polite">Desactivadas</span>
              </label>
              <p class="cookie-switch-note" lang="es">Sin personalización cuando está apagado.</p>
            </div>
          </div>
        </fieldset>
        <div class="cookie-actions">
          <button type="button" class="cookie-action ghost" id="cookie-reject" lang="es">Rechazar no esenciales</button>
          <button type="submit" class="cookie-action secondary" id="cookie-save" lang="es">Guardar preferencias</button>
          <button type="button" class="cookie-action primary" id="cookie-accept-all" lang="es">Aceptar todo</button>
        </div>
        <p class="cookie-footnote" lang="es">Puede actualizar su selección en cualquier momento desde “Cookie preferences”.</p>
      </form>
    </section>
  </div>

  <noscript>
    <div class="cookie-noscript" lang="es">Para gestionar las preferencias de cookies habilite JavaScript o contacte al equipo de soporte. Las cookies esenciales seguirán activas para mantener la sesión segura.</div>
  </noscript>

  <script>
    const GATEWAY_URL = 'https://YOUR-GATEWAY.example.workers.dev/v1/gateway';

    const $ = (id) => document.getElementById(id);
    const state = { lang: 'en', muted: false, recording: false };

    const composer = $('composer');
    const msgInput = $('msg');
    const sendBtn = $('send');
    const statusEl = $('status');
    const log = $('log');
    let emptyState = $('empty-state');
    const providerSelect = $('provider');
    const langToggle = $('lang-toggle');
    const muteToggle = $('mute-toggle');
    const recordBtn = $('record');
    const uploadBtn = $('upload');
    const uploadInput = $('file-upload');
    const cookieLayer = $('cookie-layer');
    const cookieDialog = $('cookie-dialog');
    const cookieTrigger = $('cookie-trigger');
    const cookieForm = $('cookie-form');
    const cookieClose = $('cookie-close');
    const cookieAcceptAll = $('cookie-accept-all');
    const cookieReject = $('cookie-reject');
    const cookieSwitches = Array.from(document.querySelectorAll('.cookie-switch[data-preference]'));
    const cookiePrefsKey = 'codah.cookie.preferences.v1';
    let hasStoredCookiePrefs = false;

    function normalize(value){
      return value.normalize('NFKC').replace(/[^\S\r\n]+/g,' ').trim();
    }

    function setStatus(message = '', tone = 'info'){
      if(!statusEl){ return; }
      statusEl.textContent = message;
      statusEl.dataset.tone = tone;
    }

    function clearEmptyState(){
      if(emptyState){
        emptyState.remove();
        emptyState = null;
      }
    }

    function createMessage(role, text){
      const article = document.createElement('article');
      article.className = `message message-${role}`;
      const label = document.createElement('span');
      label.className = 'message-role';
      label.textContent = role === 'user' ? 'You' : role === 'assistant' ? 'Codah' : 'System';
      const bubble = document.createElement('p');
      bubble.className = 'message-bubble';
      bubble.textContent = text;
      article.append(label, bubble);
      return article;
    }

    function appendMessage(role, text){
      if(!log){ return; }
      clearEmptyState();
      log.appendChild(createMessage(role, text));
      log.scrollTo({ top: log.scrollHeight, behavior: 'smooth' });
    }

    function updateCookieSwitchState(input){
      if(!input){ return; }
      const wrapper = input.closest('.cookie-switch-label');
      const stateLabel = wrapper ? wrapper.querySelector('.cookie-switch-state') : null;
      if(!stateLabel){ return; }
      let stateText = input.checked ? 'Activadas' : 'Desactivadas';
      let stateValue = input.checked ? 'on' : 'off';
      if(input.disabled){
        stateText = 'Siempre activa';
        stateValue = 'always';
      }
      stateLabel.dataset.state = stateValue;
      stateLabel.textContent = stateText;
    }

    function readCookiePreferences(){
      const prefs = {};
      cookieSwitches.forEach((input) => {
        const key = input.dataset.preference || input.name;
        if(key){
          prefs[key] = Boolean(input.checked);
        }
      });
      return prefs;
    }

    function applyCookiePreferences(stored){
      if(!stored || typeof stored !== 'object'){ return; }
      const choices = stored.choices && typeof stored.choices === 'object' ? stored.choices : stored;
      cookieSwitches.forEach((input) => {
        const key = input.dataset.preference || input.name;
        if(!key){ return; }
        if(Object.prototype.hasOwnProperty.call(choices, key) && !input.disabled){
          input.checked = Boolean(choices[key]);
        }
        updateCookieSwitchState(input);
      });
    }

    function showCookieTrigger(show = true){
      if(cookieTrigger){
        cookieTrigger.hidden = !show;
        cookieTrigger.setAttribute('aria-expanded', 'false');
      }
    }

    function openCookiePanel({ focusDialog = true } = {}){
      if(!cookieLayer){ return; }
      const raf = typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : (fn) => setTimeout(fn, 16);
      cookieLayer.hidden = false;
      raf(() => {
        cookieLayer.classList.add('is-visible');
      });
      document.body.classList.add('cookie-modal-open');
      if(cookieDialog){
        cookieDialog.setAttribute('aria-hidden', 'false');
      }
      if(cookieTrigger && !cookieTrigger.hidden){
        cookieTrigger.setAttribute('aria-expanded', 'true');
      }
      if(focusDialog && cookieDialog){
        cookieDialog.focus();
      }
    }

    function closeCookiePanel({ focusTrigger = true } = {}){
      if(!cookieLayer){ return; }
      cookieLayer.classList.remove('is-visible');
      document.body.classList.remove('cookie-modal-open');
      if(cookieDialog){
        cookieDialog.setAttribute('aria-hidden', 'true');
      }
      const delay = typeof window !== 'undefined' && window.matchMedia ? (window.matchMedia('(prefers-reduced-motion: reduce)').matches ? 0 : 260) : 260;
      const timerRoot = typeof window !== 'undefined' ? window : (typeof globalThis !== 'undefined' ? globalThis : null);
      const runTimeout = timerRoot && typeof timerRoot.setTimeout === 'function' ? timerRoot.setTimeout.bind(timerRoot) : setTimeout;
      runTimeout(() => {
        if(cookieLayer){ cookieLayer.hidden = true; }
      }, delay);
      if(cookieTrigger && !cookieTrigger.hidden){
        cookieTrigger.setAttribute('aria-expanded', 'false');
      }
      if(cookieTrigger && focusTrigger){
        cookieTrigger.focus();
      }
    }

    function persistCookiePreferences(source = 'custom'){
      const payload = {
        choices: readCookiePreferences(),
        source,
        updatedAt: new Date().toISOString(),
        version: 1
      };
      if(Object.prototype.hasOwnProperty.call(payload.choices, 'necessary')){
        payload.choices.necessary = true;
      }
      hasStoredCookiePrefs = true;
      showCookieTrigger(true);
      try{
        localStorage.setItem(cookiePrefsKey, JSON.stringify(payload));
      }catch(err){
        console.warn('Unable to store cookie preferences', err);
      }
      return payload;
    }

    function loadCookiePreferences(){
      try{
        const raw = localStorage.getItem(cookiePrefsKey);
        if(!raw){ return null; }
        const parsed = JSON.parse(raw);
        return parsed && typeof parsed === 'object' ? parsed : null;
      }catch(err){
        console.warn('Unable to read cookie preferences', err);
        return null;
      }
    }

    function handleCookieFocusTrap(event){
      if(!cookieLayer || cookieLayer.hidden || !cookieDialog){ return; }
      if(event.key === 'Escape'){
        event.preventDefault();
        if(hasStoredCookiePrefs){
          closeCookiePanel();
        }else{
          persistCookiePreferences('dismiss');
          closeCookiePanel();
          setStatus('Solo cookies esenciales activas.', 'info');
        }
        return;
      }
      if(event.key !== 'Tab'){ return; }
      const focusable = Array.from(cookieDialog.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'))
        .filter((el) => !el.hasAttribute('disabled') && el.tabIndex !== -1 && el.getAttribute('aria-hidden') !== 'true' && (el.offsetWidth > 0 || el.offsetHeight > 0 || el === document.activeElement));
      if(!focusable.length){ return; }
      const first = focusable[0];
      const last = focusable[focusable.length - 1];
      if(event.shiftKey && document.activeElement === first){
        event.preventDefault();
        last.focus();
      }else if(!event.shiftKey && document.activeElement === last){
        event.preventDefault();
        first.focus();
      }
    }

    function initCookieConsent(){
      if(!cookieLayer || !cookieDialog || !cookieSwitches.length){ return; }
      cookieLayer.hidden = true;
      cookieLayer.classList.remove('is-visible');
      cookieDialog.setAttribute('aria-hidden', 'true');
      cookieSwitches.forEach((input) => updateCookieSwitchState(input));
      const stored = loadCookiePreferences();
      if(stored){
        hasStoredCookiePrefs = true;
        applyCookiePreferences(stored);
        showCookieTrigger(true);
      }else{
        showCookieTrigger(false);
        openCookiePanel();
      }
      if(cookieTrigger){
        cookieTrigger.addEventListener('click', () => {
          openCookiePanel();
        });
      }
      if(cookieClose){
        cookieClose.addEventListener('click', () => {
          const alreadyStored = hasStoredCookiePrefs;
          persistCookiePreferences(alreadyStored ? 'close' : 'dismiss');
          closeCookiePanel();
          if(!alreadyStored){
            setStatus('Solo cookies esenciales activas.', 'info');
          }
        });
      }
      if(cookieLayer){
        cookieLayer.addEventListener('keydown', handleCookieFocusTrap);
        cookieLayer.addEventListener('click', (event) => {
          if(event.target === cookieLayer && hasStoredCookiePrefs){
            closeCookiePanel();
          }
        });
      }
      cookieSwitches.forEach((input) => {
        input.addEventListener('change', () => updateCookieSwitchState(input));
      });
      if(cookieAcceptAll){
        cookieAcceptAll.addEventListener('click', () => {
          cookieSwitches.forEach((input) => {
            if(!input.disabled){
              input.checked = true;
              updateCookieSwitchState(input);
            }
          });
          persistCookiePreferences('accept-all');
          closeCookiePanel();
          setStatus('Todas las cookies activadas.', 'success');
        });
      }
      if(cookieReject){
        cookieReject.addEventListener('click', () => {
          cookieSwitches.forEach((input) => {
            if(!input.disabled){
              input.checked = false;
              updateCookieSwitchState(input);
            }
          });
          persistCookiePreferences('reject-non-essential');
          closeCookiePanel();
          setStatus('Solo cookies esenciales activas.', 'info');
        });
      }
      if(cookieForm){
        cookieForm.addEventListener('submit', (event) => {
          event.preventDefault();
          persistCookiePreferences('save-preferences');
          closeCookiePanel();
          setStatus('Preferencias de cookies guardadas.', 'success');
        });
      }
    }

    async function sendMessage(){
      if(!msgInput || !sendBtn){ return; }
      const text = normalize(msgInput.value || '');
      if(!text){
        setStatus('Type a message to begin.', 'warn');
        msgInput.focus();
        return;
      }

      appendMessage('user', text);
      msgInput.value = '';
      msgInput.focus();

      const provider = providerSelect ? providerSelect.value : 'codex';
      const payload = { provider, message: text, lang: state.lang, honeypot: '' };

      sendBtn.disabled = true;
      msgInput.disabled = true;
      setStatus('Sending…');

      try{
        const res = await fetch(GATEWAY_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const data = await res.json().catch(() => ({ error: 'Unable to parse response.' }));
        const ok = res.ok && !data.error;
        const content = data.text || data.message || data.output;

        if(ok && content){
          appendMessage('assistant', content);
          setStatus('Delivered', 'success');
        }else if(ok){
          appendMessage('assistant', JSON.stringify(data, null, 2));
          setStatus('Response received', 'success');
        }else{
          appendMessage('system', data.error || `${res.status} ${res.statusText}`);
          setStatus('Request failed', 'error');
        }
      }catch(err){
        const message = err instanceof Error ? err.message : 'Network error';
        appendMessage('system', message);
        setStatus('Network error', 'error');
      }finally{
        sendBtn.disabled = false;
        msgInput.disabled = false;
        msgInput.focus();
      }
    }

    if(composer){
      composer.addEventListener('submit', (event) => {
        event.preventDefault();
        sendMessage();
      });
    }

    if(sendBtn){
      sendBtn.addEventListener('click', (event) => {
        event.preventDefault();
        sendMessage();
      });
    }

    if(msgInput){
      msgInput.addEventListener('keydown', (event) => {
        if(event.key === 'Enter' && !event.shiftKey){
          event.preventDefault();
          sendMessage();
        }
      });
    }

    if(langToggle){
      langToggle.addEventListener('click', () => {
        state.lang = state.lang === 'en' ? 'es' : 'en';
        langToggle.textContent = state.lang.toUpperCase();
        langToggle.setAttribute('aria-label', `Language ${state.lang.toUpperCase()}`);
        setStatus(`Language set to ${state.lang.toUpperCase()}.`);
      });
    }

    if(muteToggle){
      muteToggle.addEventListener('click', () => {
        state.muted = !state.muted;
        muteToggle.setAttribute('aria-pressed', String(state.muted));
        muteToggle.textContent = state.muted ? 'Muted' : 'Mute';
        setStatus(state.muted ? 'Notifications muted.' : 'Notifications active.');
      });
    }

    if(recordBtn){
      recordBtn.addEventListener('click', () => {
        state.recording = !state.recording;
        recordBtn.classList.toggle('is-active', state.recording);
        recordBtn.setAttribute('aria-pressed', String(state.recording));
        recordBtn.textContent = state.recording ? 'Stop' : 'Record';
        setStatus(state.recording ? 'Recording… (preview)' : 'Recording saved.');
        if(state.recording){
          appendMessage('system', 'Voice recorder armed — capturing audio preview.');
        }else{
          appendMessage('system', 'Voice recorder stopped. Audio not yet uploaded.');
        }
      });
    }

    if(uploadBtn && uploadInput){
      uploadBtn.addEventListener('click', () => {
        uploadInput.click();
      });

      uploadInput.addEventListener('change', () => {
        if(uploadInput.files && uploadInput.files.length){
          const file = uploadInput.files[0];
          const size = file.size ? ` (${Math.max(1, Math.round(file.size / 1024))} KB)` : '';
          appendMessage('system', `Attached ${file.name}${size}.`);
          setStatus(`Ready to upload ${file.name}.`);
        }
        uploadInput.value = '';
      });
    }

    initCookieConsent();
  </script>
</body>
</html>
